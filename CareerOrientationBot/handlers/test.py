import asyncio
from aiogram.exceptions import TelegramBadRequest
from aiogram import F, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import BufferedInputFile, InputFile, Message, CallbackQuery, callback_query
from aiogram.fsm.state import StatesGroup,State
from aiogram.types import InlineKeyboardButton, KeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
import json
import app.keyboards as kb
from handlers import get_start
import re
import os
from database.db import Database

router = Router()

#–°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class TestState(StatesGroup):
    testing = State()      #–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    scores ={'chel': 0, 'prir': 0, 'tech': 0, 'znak': 0, 'hud': 0}      #–°–ª–æ–≤–∞—Ä—å –±–∞–ª–ª–æ–≤ –ø—Ä–µ–¥—Ä–∞—Å–ø–æ–ª–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –∫ —Ç–∏–ø–∞–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ 

#–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
#–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.callback_query(F.data == 'start_test')
async def start_test(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    with open('test/questions.json', 'r') as json_file:                                             #–û—Ç–∫—Ä—ã—Ç–∏–µ JSON 
        questions_list = json.load(json_file)    
    await state.update_data(questions_count = len(questions_list['questions']))
    await state.update_data(current_question = 0)
    await state.update_data(questions = questions_list['questions'])
    await state.set_state(TestState.testing)
    await callback.message.answer('‚ùì–¢–µ—Å—Ç —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 20 –≤–æ–ø—Ä–æ—Å–æ–≤ \
                                     \n\nüìù–í –∫–∞–∂–¥–æ–º –≤–æ–ø—Ä–æ—Å–µ –í–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ –¥–≤—É—Ö –≤–∏–¥–æ–≤ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä–∞—è –≤–∞–º –±–æ–ª—å—à–µ –Ω—Ä–∞–≤–∏—Ç—Å—è \
                                     \n\n‚è≥–í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ ~ 5 –º–∏–Ω—É—Ç', reply_markup=kb.start_test)
    await callback.answer('')

#–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
@router.callback_query(TestState.testing, F.data.startswith('testing_'))
async def answer_question(callback: CallbackQuery, state: FSMContext):
    
    questions_data = await state.get_data() 
    qList = questions_data.get('questions')
    answer = callback.data.split("_")[1]
    db = Database()
    
    #–û—Ç–≤–µ—Ç a
    if answer == 'a':            
            match qList[questions_data.get('current_question')-1]['answers'][0]['score']:
                case 'chel':
                    TestState.scores['chel'] = TestState.scores['chel'] + 1
                case 'hud':
                    TestState.scores['hud'] = TestState.scores['hud'] + 1
                case 'znak':
                    TestState.scores['znak'] = TestState.scores['znak'] + 1
                case 'tech':
                    TestState.scores['tech'] = TestState.scores['tech'] + 1
                case 'prir':
                    TestState.scores['prir'] = TestState.scores['prir'] + 1
                    
    #–û—Ç–≤–µ—Ç b
    if answer == 'b':  
        match qList[questions_data.get('current_question')-1]['answers'][1]['score']:
            case 'chel':
                TestState.scores['chel'] = TestState.scores['chel'] + 1
            case 'hud':
                TestState.scores['hud'] = TestState.scores['hud'] + 1
            case 'znak':
                TestState.scores['znak'] = TestState.scores['znak'] + 1
            case 'tech':
                TestState.scores['tech'] = TestState.scores['tech'] + 1
            case 'prir':
                TestState.scores['prir'] = TestState.scores['prir'] + 1
                
    #–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—ã
    if questions_data.get('current_question') != questions_data.get('questions_count'):   
        await callback.message.edit_text('‚ùî<b>–í–æ–ø—Ä–æ—Å ' + str(questions_data.get('current_question') + 1) + 
                                                    ' –∏–∑ ' + str(questions_data.get('questions_count')) +
                                                    '</b>\n\nüëâ<u>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –±–æ–ª—å—à–µ –Ω—Ä–∞–≤–∏—Ç—Å—è:</u>\n\n' + qList[questions_data.get('current_question')]['answers'][0]['text'] + '\n\n' +  
                                            qList[questions_data.get('current_question')]['answers'][1]['text'],
                                            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='–∞', callback_data='testing_a')],
            [InlineKeyboardButton(text='–±', callback_data='testing_b')],
            [InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', callback_data='cancel_test')]
        ]))
        
        await state.update_data(current_question = (questions_data.get('current_question') + 1))
        await callback.answer('')
    #–ö–æ–Ω–µ—Ü —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    else:        
        await callback.message.edit_text('‚úÖ<b>–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω</b>', reply_markup=kb.result_test)
        await callback.answer('')

@router.callback_query(TestState.testing, F.data == 'result')
async def result(callback: CallbackQuery, state: FSMContext):
    highest_score = max(TestState.scores.values())    
    db = Database()
    prof_type = list([key for key, val in TestState.scores.items() if val == highest_score])
        
    prof_type_name = list()
    prof_type_code = list()
    for pt in prof_type:
            
        match pt:
            case 'chel': 
                prof_type_name.insert(0,'–ß–µ–ª–æ–≤–µ–∫-—á–µ–ª–æ–≤–µ–∫')
                prof_type_code.insert(0, '1')
            case 'prir':
                prof_type_name.insert(0,'–ß–µ–ª–æ–≤–µ–∫-–ø—Ä–∏—Ä–æ–¥–∞')
                prof_type_code.insert(0, '3')
            case 'znak':
                prof_type_name.insert(0,'–ß–µ–ª–æ–≤–µ–∫-–∑–Ω–∞–∫–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞')
                prof_type_code.insert(0, '4')
            case 'tech': 
                prof_type_name.insert(0,'–ß–µ–ª–æ–≤–µ–∫-—Ç–µ—Ö–Ω–∏–∫–∞')
                prof_type_code.insert(0, '2')
            case 'hud': 
                prof_type_name.insert(0,'–ß–µ–ª–æ–≤–µ–∫-—Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –æ–±—Ä–∞–∑')
                prof_type_code.insert(0, '5')
                
    prof_list = list()
    for pn in prof_type_code:
        prof_list.insert(0,await db.select_prof(pn))
    prof_list = [val for val in prof_list if val]
    prof_type_string = ''
    for prof in prof_type_name:
        prof_type_string = prof_type_string + prof + '\n'
#–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if not prof_list:
        await callback.message.edit_text(f'''
<u>–í–∞—à–∞ –ø—Ä–µ–¥—Ä–∞—Å–ø–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –∫ —Ç–∏–ø–∞–º –ø—Ä–æ—Ñ–µ—Å–∏–π:</u>
                                         
üßç‚Äç‚ôÇÔ∏è–ß–µ–ª–æ–≤–µ–∫-—á–µ–ª–æ–≤–µ–∫: {TestState.scores['chel']}
üå≥–ß–µ–ª–æ–≤–µ–∫-–ø—Ä–∏—Ä–æ–¥–∞: {TestState.scores['prir']}
üî£–ß–µ–ª–æ–≤–µ–∫-–∑–Ω–∞–∫–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞: {TestState.scores['znak']}
üõ†Ô∏è–ß–µ–ª–æ–≤–µ–∫-—Ç–µ—Ö–Ω–∏–∫–∞: {TestState.scores['tech']}
üñºÔ∏è–ß–µ–ª–æ–≤–µ–∫-—Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –æ–±—Ä–∞–∑: {TestState.scores['hud']}

<u>–í—ã –Ω–∞–∏–±–æ–ª–µ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –∫ —Ç–∏–ø—É –ø—Ä–æ—Ñ–µ—Å–∏–∏:</u>\n{prof_type_string}
–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –¥–ª—è –≤–∞—Å –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π, –ø—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ
''', reply_markup=kb.result_show)
    else:
        prof_string = ''
        for prof_cat in prof_list:
            if prof_cat != ():
                for prof in prof_cat:
                    prof_string = prof_string + str(prof[1]) + '\n'

        result_kb_builder = InlineKeyboardBuilder()
        for prof_cat in prof_list:
            if prof_cat != ():
                for prof in prof_cat:
                     result_kb_builder.button(text = prof[1], callback_data='prof_' + str(prof[0]))      
        else:            
            result_kb_builder.attach(InlineKeyboardBuilder.from_markup(kb.result_show))
            result_kb_builder.adjust(1, True)
            await callback.message.edit_text(f'''
‚úÖ<b>–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω</b>

<u>–í–∞—à–∞ –ø—Ä–µ–¥—Ä–∞—Å–ø–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –∫ —Ç–∏–ø–∞–º –ø—Ä–æ—Ñ–µ—Å–∏–π:</u>
                                         
üßç‚Äç‚ôÇÔ∏è–ß–µ–ª–æ–≤–µ–∫-—á–µ–ª–æ–≤–µ–∫: {TestState.scores['chel']}
üå≥–ß–µ–ª–æ–≤–µ–∫-–ø—Ä–∏—Ä–æ–¥–∞: {TestState.scores['prir']}
üî£–ß–µ–ª–æ–≤–µ–∫-–∑–Ω–∞–∫–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞: {TestState.scores['znak']}
üõ†Ô∏è–ß–µ–ª–æ–≤–µ–∫-—Ç–µ—Ö–Ω–∏–∫–∞: {TestState.scores['tech']}
üñºÔ∏è–ß–µ–ª–æ–≤–µ–∫-—Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –æ–±—Ä–∞–∑: {TestState.scores['hud']}

‚≠êÔ∏è<u>–í—ã –Ω–∞–∏–±–æ–ª–µ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –∫ —Ç–∏–ø—É –ø—Ä–æ—Ñ–µ—Å–∏–∏:</u>‚≠êÔ∏è\n{prof_type_string}
üåü<u>–í–∞–º –ø–æ–¥—Ö–æ–¥—è—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:</u>üåü\n{prof_string}
üëá–£–∑–Ω–∞–π—Ç–µ –æ –ø–æ–¥–æ–±—Ä–∞–Ω–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è—Ö –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—Éüëá
''', reply_markup=result_kb_builder.as_markup())    
    TestState.scores = {'chel': 0, 'prir': 0, 'tech': 0, 'znak': 0, 'hud': 0}
    await callback.answer('')
    
 #–û—Ç–º–µ–Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.callback_query(TestState.testing, F.data == 'cancel_test')
async def cancel_test(callback: CallbackQuery, state: FSMContext):
        await callback.message.delete()
        await state.clear()
        await callback.answer('')
        await get_start.startCallback(callback)

#–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–µ—Å–∏–∏
@router.callback_query(TestState.testing, F.data.startswith('prof_'))
async def cancel_test(callback: CallbackQuery, state: FSMContext):    
    db = Database()
    await state.update_data(result_message_text = callback.message.text)
    await state.update_data(result_message_keyboard = callback.message.reply_markup)
    prof = await db.select_prof_byId(callback.data.split("_")[1])
    await callback.message.delete()
    await callback.message.answer_photo(photo= BufferedInputFile(prof[0][5], filename="photo.jpg"),
                                        caption=f'<b><u>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {prof[0][1]}</u></b>\n\n{prof[0][3]}\n\n<a href = "{prof[0][4]}">–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –Ω–∞ –¥–∞–Ω–Ω—É—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å</a>',
                                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                                                         [InlineKeyboardButton(text='–í—ã–±—Ä–∞—Ç—å',
                                                                                               callback_data=f'choose_prof_{callback.data.split("_")[1]}')],
                                                                                               [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back_to_results')]])
                                        )        
    await callback.answer('')

#–ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
@router.callback_query(TestState.testing, F.data == 'back_to_results')
async def cancel_test(callback: CallbackQuery, state: FSMContext):
    result_data = await state.get_data()
    await callback.message.delete()
    await callback.message.answer(result_data.get('result_message_text'), reply_markup=result_data.get('result_message_keyboard'))        
    await callback.answer('')

#–í—ã–±–æ—Ä –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
@router.callback_query(TestState.testing, F.data.startswith('choose_prof_'))
async def choose_prof(callback: CallbackQuery, state: FSMContext):
    db = Database()
    await callback.message.delete()
    await db.insert_prof(callback.from_user.id, callback.data.split("_")[2])
    await callback.message.answer('üéâüéä–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –≤—ã–±–æ—Ä–æ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏!üéäüéâ', reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='–£—Ä–∞', callback_data='end_test')]]))        
    await callback.answer('')
    
#–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.callback_query(TestState.testing, F.data.startswith('end_test'))
async def choose_prof(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await state.clear()
    await callback.answer('')
    await get_start.startCallback(callback)

